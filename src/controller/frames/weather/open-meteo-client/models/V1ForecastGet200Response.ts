/**
 * Open-Meteo APIs
 * Open-Meteo offers free weather forecast APIs for open-source developers and non-commercial use. No API key is required.
 *
 * OpenAPI spec version: 1.0
 * Contact: info@open-meteo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { CurrentWeather } from '../models/CurrentWeather';
import { DailyResponse } from '../models/DailyResponse';
import { HourlyResponse } from '../models/HourlyResponse';
import { HttpFile } from '../http/http';

export class V1ForecastGet200Response {
    /**
    * WGS84 of the center of the weather grid-cell which was used to generate this forecast. This coordinate might be up to 5 km away.
    */
    'latitude'?: number;
    /**
    * WGS84 of the center of the weather grid-cell which was used to generate this forecast. This coordinate might be up to 5 km away.
    */
    'longitude'?: number;
    /**
    * The elevation in meters of the selected weather grid-cell. In mountain terrain it might differ from the location you would expect.
    */
    'elevation'?: number;
    /**
    * Generation time of the weather forecast in milli seconds. This is mainly used for performance monitoring and improvements.
    */
    'generationtimeMs'?: number;
    /**
    * Applied timezone offset from the &timezone= parameter.
    */
    'utcOffsetSeconds'?: number;
    /**
    * For each selected weather variable, data will be returned as a floating point array. Additionally a `time` array will be returned with ISO8601 timestamps.
    */
    'hourly'?: HourlyResponse;
    /**
    * For each selected weather variable, the unit will be listed here.
    */
    'hourlyUnits'?: { [key: string]: string; };
    /**
    * For each selected daily weather variable, data will be returned as a floating point array. Additionally a `time` array will be returned with ISO8601 timestamps.
    */
    'daily'?: DailyResponse;
    /**
    * For each selected daily weather variable, the unit will be listed here.
    */
    'dailyUnits'?: { [key: string]: string; };
    /**
    * Current weather conditions with the attributes: time, temperature, wind_speed, wind_direction and weather_code
    */
    'current'?: CurrentWeather;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "latitude",
            "baseName": "latitude",
            "type": "number",
            "format": ""
        },
        {
            "name": "longitude",
            "baseName": "longitude",
            "type": "number",
            "format": ""
        },
        {
            "name": "elevation",
            "baseName": "elevation",
            "type": "number",
            "format": ""
        },
        {
            "name": "generationtimeMs",
            "baseName": "generationtime_ms",
            "type": "number",
            "format": ""
        },
        {
            "name": "utcOffsetSeconds",
            "baseName": "utc_offset_seconds",
            "type": "number",
            "format": ""
        },
        {
            "name": "hourly",
            "baseName": "hourly",
            "type": "HourlyResponse",
            "format": ""
        },
        {
            "name": "hourlyUnits",
            "baseName": "hourly_units",
            "type": "{ [key: string]: string; }",
            "format": ""
        },
        {
            "name": "daily",
            "baseName": "daily",
            "type": "DailyResponse",
            "format": ""
        },
        {
            "name": "dailyUnits",
            "baseName": "daily_units",
            "type": "{ [key: string]: string; }",
            "format": ""
        },
        {
            "name": "current",
            "baseName": "current",
            "type": "CurrentWeather",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return V1ForecastGet200Response.attributeTypeMap;
    }

    public constructor() {
    }
}

